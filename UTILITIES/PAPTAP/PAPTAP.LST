ASM68 6800 Assembler (c) 1988-1995 Evenson Consulting Services        Page 1
FILE: c:\src\repos\zoggins\mc6800\utilities\paptap\paptap.asm

00011         9000           ORG     $9000            
00013         801E PIABDR    EQU     $801E            PIA IN SLOT 7, DATA REGIST
00014         801F PIABCR    EQU     $801F            PIA IN SLOT 7, CONTROL REG
00015               
00016         E1D1 OUTCH     EQU     $E1D1            OUTPUT CHARACTER ROUTINE
00017               
00018 9000 8D 2F   ENTER     BSR     PIASUP           INIT PIA
00019 9002 8D 3C   START     BSR     PIADAT           GET 1ST BYTE
00020 9004 81 53             CMP A   #'S              IS IT AN S?
00021 9006 26 FA             BNE     START            IF NOT, START OVER
00022 9008 8D 36             BSR     PIADAT           GET 2ND BYTE
00023 900A 81 31             CMP A   #$31             IS IT A 1?
00024 900C 26 F4             BNE     START            IF NOT, START OVER
00025 900E 7F 9088           CLR     CHKSUM           
00026 9011 8D 47             BSR     GETBYTE          GET THE BYTE COUNT
00027 9013 80 02             SUB A   #2               
00028 9015 B7 9085           STA A   NUMBYT           
00029 9018 8D 52             BSR     GETADDR          GET ADDRESS AND LOAD X
00030               
00031 901A 8D 3E   LOOP      BSR     GETBYTE          READ THE BYTES
00032 901C 7A 9085           DEC     NUMBYT           
00033 901F 27 05             BEQ     CHKCHK           LAST BYTE IS CHECKSUM
00034 9021 A7 00             STA A   0,X              
00035 9023 08                INX                      
00036 9024 20 F4             BRA     LOOP             
00037               
00038 9026 7C 9088 CHKCHK    INC     CHKSUM           CHECK THE CHECKSUM      
00039 9029 27 D7             BEQ     START            GO TO NEXT LINE
00040 902B 86 21             LDA A   #'!              
00041 902D BD E1D1           JSR     OUTCH            
00042 9030 3F                SWI                      FAILED CHECK SUM, SO INTER
00043               
00044               *********** PIASUP - PIA SETUP ROUTINE
00045 9031 86 32   PIASUP    LDA A   #$32             C1 SET ON RISING EDGE OF R
00046 9033 B7 801F           STA A   PIABCR           SET CRB
00047 9036 4F                CLR A                    
00048 9037 B7 801E           STA A   PIABDR           SET DDRB = ALL INPUTS
00049 903A 86 3E             LDA A   #$3E             RAISE ACK ON C2 (RESET RDY
00050 903C B7 801F           STA A   PIABCR           SET CRB
00051 903F 39                RTS                      AND LEAVE...
00052               
00053               *********** PIADAT - GET DATA FROM PIA
00054 9040 86 36   PIADAT    LDA A   #$36             C1 SET ON RISING EDGE OF R
00055 9042 B7 801F           STA A   PIABCR           SET CRB
00056 9045 B6 801F DATLOP    LDA A   PIABCR           GET RDY ON C1 
00057 9048 2B 02             BMI     GETDAT           DATA PRESENT? (BIT 7 == 1)
00058 904A 20 F9             BRA     DATLOP           NOT YET. KEEP TRYING.
00059 904C B6 801E GETDAT    LDA A   PIABDR           YES. GET THE DATA,
00060 904F BD E1D1           JSR     OUTCH            PRINT IT OUT
00061 9052 36                PSH A                    AND SAVE IT.
00062 9053 86 3E             LDA A   #$3E             RAISE ACK ON C2 (RESET RDY
00063 9055 B7 801F           STA A   PIABCR           
00064 9058 32                PUL A                    PUT DATA BACK IN REGISTER
00065 9059 39                RTS                      AND LEAVE...
00066               
00067               *********** GETBYTE - READ ASCII HEX BYTE (2 digits)
00068 905A 8D 1E   GETBYTE   BSR     A2H              GET FIRST CHARACTER TO HEX
00069 905C 48                ASL A                    MOVE IT UP 4 BITS
ASM68 6800 Assembler (c) 1988-1995 Evenson Consulting Services        Page 2
FILE: c:\src\repos\zoggins\mc6800\utilities\paptap\paptap.asm

00070 905D 48                ASL A                    
00071 905E 48                ASL A                    
00072 905F 48                ASL A                    
00073 9060 16                TAB                      
00074 9061 8D 17             BSR     A2H              GET SECOND CHARACTER TO HE
00075 9063 1B                ABA                      ADD THEM TOGETHER
00076 9064 16                TAB                      
00077 9065 FB 9088           ADD B   CHKSUM           ADD TO CHECKSUM
00078 9068 F7 9088           STA B   CHKSUM           
00079 906B 39                RTS                      
00080               
00081               *********** GETADDR - READ ADDRESS AND LOAD X
00082 906C 8D EC   GETADDR   BSR     GETBYTE          
00083 906E B7 9086           STA A   TMPADDR1         
00084 9071 8D E7             BSR     GETBYTE          
00085 9073 B7 9087           STA A   TMPADDR2         
00086 9076 FE 9086           LDX     TMPADDR1         
00087 9079 39                RTS                      
00088               
00089               *********** A2H - READ SINGLE ASCII BYTE AND CONVERT TO HEX
00090 907A 8D C4   A2H       BSR     PIADAT           
00091 907C 80 30             SUB A   #$30             
00092 907E 81 09             CMP A   #09              
00093 9080 2F 02             BLE     RT               
00094 9082 80 07             SUB A   #7               
00095 9084 39      RT        RTS                      
00096               
00097 9085         NUMBYT    RMB     1                BYTES LEFT TO READ
00098 9086         TMPADDR1  RMB     1                TEMP ADDRESS POINTER
00099 9087         TMPADDR2  RMB     1                
00100 9088         CHKSUM    RMB     1                RUNNING CHECKSUM
00101               
00102         0000           END                      

No errors

 Total bytes output = 137

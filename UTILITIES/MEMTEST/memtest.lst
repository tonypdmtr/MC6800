AS02 Assembler for M6802 [1.42].                                     Page    1
------------------------------- .\memtest.asm --------------------------------

228 lines read, no errors in pass 1.
                        ;=====================================================
                        ; A basic memory test for the 6800, using some calls
                        ; in SWTBUG.  August, 2014 by Bob Applegate
                        ; bob@corshamtech.com
                        ;
                        ; This uses a 9 byte repeating sequence.  Since the
                        ; pattern repeats every nine locations, it can detect
                        ; shorted address bits.
                        ;
                        	if	~IN_SWTBUG	;SWTUB provides much of this
0004 =                  EOT		equ	$04
000a =                  LF		equ	$0a
000d =                  CR		equ	$0d
                        
e047 =                  BADDR		equ	$e047
e07e =                  PDATA1		equ	$e07e
e0c8 =                  OUT4HS		equ	$e0c8
e0ca =                  OUT2HS		equ	$e0ca
e0e3 =                  CONTRL		equ	$e0e3
                        ;OUTCH		equ	$e1d1
                        	endif
                        
                        ;
                        ; After rolling through all 8 bits, this is the
                        ; ninth value written.  Can be anything, but I'd
                        ; suggest not using a power of two.
                        ;
0055 =                  SPECIAL		equ	$55
                        
                        
                        		bss
a080 =                  		org	$a080
a080 =                  LOMEM		dw	$a300
a082 =                  HIMEM		dw	$bfff
a084 =                  pattern		ds	1
a085 =                  expected	ds	1
a086 =                  got		ds	1
a087 =                  failaddr	ds	2
                        
                        ;
                        ; If part of SWTBUG then don't set ORG, let SWTBUG do 
                        ;
                        		code
                        	if	~IN_SWTBUG
0200 =                  		org	$0200
                        	endif
0200 : ce02e0           MemTest		ldx	#startmsg	;initial hello message
0203 : bde07e           		jsr	PDATA1
                        ;
                        ; Ask for and save the starting address to test
                        ;
0206 : ce030b           		ldx	#lomsg
0209 : bde07e           		jsr	PDATA1
020c : bde047           		jsr	BADDR
020f : ffa080           		stx	LOMEM
0212 : bd02c2           		jsr	crlf
                        ;
                        ; Now ask for the ending address
                        ;
0215 : ce0333           		ldx	#himsg
0218 : bde07e           		jsr	PDATA1
AS02 Assembler for M6802 [1.42].                                     Page    2
------------------------------- .\memtest.asm --------------------------------

021b : bde047           		jsr	BADDR
021e : ffa082           		stx	HIMEM
                        ;
                        ; Display the range we're testing just for a sanity ch
                        ;
0221 : ce035b           		ldx	#addrmsg
0224 : bde07e           		jsr	PDATA1
0227 : cea080           		ldx	#LOMEM
022a : bde0c8           		jsr	OUT4HS
022d : ce036b           		ldx	#endmsg
0230 : bde07e           		jsr	PDATA1
0233 : cea082           		ldx	#HIMEM
0236 : bde0c8           		jsr	OUT4HS
0239 : ce0372           		ldx	#anykeymsg
023c : bde07e           		jsr	PDATA1
                        ;
                        ; Initialize loop
                        ;
023f : 8601             		lda	#$01		;starting pattern
                        ;
                        ; Upon entry, the contents of A are saved as the start
                        ; pattern for the next fill operation.
                        ;
0241 : b7a084           save_start	sta	pattern		;save for comparison
0244 : fea080           		ldx	LOMEM
                        ;
                        ; Loop to fill the next memory location
                        ;
0247 : a700             fill		sta	0,x
0249 : bca082           		cpx	HIMEM		;at last byte?
024c : 2714             		beq	dotest		;yes, test memory
024e : 08               		inx			;move to next address
                        ;
                        ; Move to next pattern
                        ;
024f : 8180             		cmpa	#$80		;last bit roll?
0251 : 2707             		beq	fspec		;yes, so do special
0253 : 8155             		cmpa	#SPECIAL	;just did special?
0255 : 2707             		beq	fbit		;yes, so back to the starting bit pattern
0257 : 48               		asla			;roll bit
0258 : 20ed             		bra	fill		;write next pattern
025a : 8655             fspec		lda	#SPECIAL
025c : 20e9             		bra	fill
025e : 8601             fbit		lda	#$01
0260 : 20e5             		bra	fill
                        ;
                        ; Done filling
                        ;
0262 : b6a084           dotest		lda	pattern		;get first pattern written
0265 : fea080           		ldx	LOMEM		;starting address
0268 : e600             test		ldab	0,x		;load expected value
026a : 11               		cba			;what it should be?
026b : 2622             		bne	fail		;no
026d : bca082           		cpx	HIMEM		;at end?
0270 : 2714             		beq	passed
0272 : 08               		inx
                        ;
0273 : 8180             		cmpa	#$80		;last bit roll?
0275 : 2707             		beq	tspec		;yes, so do special
0277 : 8155             		cmpa	#SPECIAL	;just did special?
0279 : 2707             		beq	tbit		;yes, so back to the starting bit pattern
027b : 48               		asla			;else roll bit
AS02 Assembler for M6802 [1.42].                                     Page    3
------------------------------- .\memtest.asm --------------------------------

027c : 20ea             		bra	test		;write next pattern
027e : 8655             tspec		lda	#SPECIAL
0280 : 20e6             		bra	test
0282 : 8601             tbit		lda	#$01
0284 : 20e2             		bra	test
                        ;
                        ; It passed!  Print a progress dot and move on.
                        ;
0286 : 36               passed		psha
0287 : 862e             		lda	#'.'
0289 : bd02c8           		jsr	myOUTCH
                        ;
                        ; See if the user pressed a key.  If so, get it and th
                        ; this program.
                        ;
                        ;		lda	$8004
                        ;		anda	#$01
                        ;		beq	continue
                        ;		pula
                        ;		lda	$8005		;get waiting character
                        ;		bra	exit		;and then exit
                        ;
                        ;continue
028c : 32               		pula
028d : 20b2             		jmp	save_start
                        ;
                        ; Failed.  On entry, A contains the expected pattern, 
                        ; the address that failed, and B is the actual value.
                        ;
028f : b7a085           fail		sta	expected	;save values for later display
0292 : f7a086           		stab	got
0295 : ffa087           		stx	failaddr
0298 : ce038b           		ldx	#failmsg
029b : bde07e           		jsr	PDATA1
                        ;
029e : cea087           		ldx	#failaddr	;display the failed address
02a1 : bde0c8           		jsr	OUT4HS
02a4 : ce03a0           		ldx	#fail2msg
02a7 : bde07e           		jsr	PDATA1
02aa : cea085           		ldx	#expected	;display expected value
02ad : bde0ca           		jsr	OUT2HS
02b0 : ce03aa           		ldx	#fail3msg
02b3 : bde07e           		jsr	PDATA1
02b6 : fea087           		ldx	failaddr	;display the actual value
02b9 : bde0ca           		jsr	OUT2HS
02bc : bd02c2           		jsr	crlf
                        ;
                        ; Return to SWTBUG
                        ;
02bf :                  exit
                        	if	IN_SWTBUG
                        		jmp	ExtCmd
                        	else
02bf : 7ee0e3           		jmp	CONTRL
                        	endif
                        ;
                        ;------------------------------------------------
                        ; Print carriage return/line feed
                        ;
                        	if	~IN_SWTBUG
02c2 : ce036f           crlf		ldx	#crlfmsg
02c5 : 7ee07e           		jmp	PDATA1
AS02 Assembler for M6802 [1.42].                                     Page    4
------------------------------- .\memtest.asm --------------------------------

                        	endif
                        ;
                        ;------------------------------------------------
                        ; I wrote my own OUTCH rather than using SWTBUG's
                        ; because this will output the character in A,
                        ; then check to see if a key has been hit.  If so,
                        ; exit the program.
                        ;
02c8 : 36               myOUTCH		psha			;save character
02c9 : b68004           outch1		lda	$8004		;ACIA status register
02cc : 8402             		anda	#$02		;transmitter free?
02ce : 27f9             		beq	outch1		;loop if not
02d0 : 32               		pula
02d1 : b78005           		sta	$8005
02d4 : 36               		psha			;save it again
02d5 : b68004           		lda	$8004
02d8 : 8401             		anda	#$01		;char waiting in receiver?
02da : 2702             		beq	outch2		;no
02dc : 20e1             		bra	exit		;yes, so exit
02de : 32               outch2		pula
02df : 39               		rts
                        
02e0 : 0d0a0a           startmsg	db	CR,LF,LF
                        	if	~IN_SWTBUG
02e3 : 426f6227732052.. 		db	"Bob's RAM test - bob@corshamtech.com"
0307 : 0d0a0a           		db	CR,LF,LF
                        	endif
030a : 04               		db	EOT
030b : 456e7465722073.. lomsg		db	"Enter starting address (4 hex digits): ",EO
0333 : 456e7465722065.. himsg		db	"Enter ending address:                  ",EO
035b : 0d0a5465737469.. addrmsg		db	CR,LF,"Testing from ",EOT
036b : 746f2004         endmsg		db	"to ",EOT
                        	if	~IN_SWTBUG
036f : 0d0a04           crlfmsg		db	CR,LF,EOT
                        	endif	
0372 : 0d0a5072657373.. anykeymsg	db	CR,LF,"Press any key to abort",EOT
038b : 0d0a             failmsg		db	CR,LF
038d : 4661696c656420.. 		db	"Failed at address ",EOT
03a0 : 65787065637465.. fail2msg	db	"expected ",EOT
03aa : 62757420676f74.. fail3msg	db	"but got ",EOT
                        ;
03b3 =                  last		equ	$
                        
                        
No errors in pass 2.
